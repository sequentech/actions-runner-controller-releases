name: Publish ARC

# This workflow anticipates a repository_dispatch event from the following workflow:
# https://github.com/actions/actions-runner-controller/blob/master/.github/workflows/publish-arc.yaml
on:
  repository_dispatch:
    types: [arc]
    # https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch
    # Expects the following JSON payload:
    # {
    #   "client_payload": {
    #     "release_tag_name": "v0.18.0",
    #     "push_to_registries": true,
    #     "repository": "organization/repository-name",
    #     "organization": "organization-name"
    #   }
    # }

# https://docs.github.com/en/rest/overview/permissions-required-for-github-apps
permissions:
 contents: write
 packages: write

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  TARGET_ORG: ${{ env.TARGET_ORG }}
  TARGET_REPO: ${{ env.TARGET_REPO }}

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  release-controller:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Input validation
        run: |
          if [ -z "${{ github.event.client_payload.push_to_registries }}" ]; then
            echo "client_payload.push_to_registries cannot be empty"
            exit 1
          fi
          if [ -z "${{ github.event.client_payload.release_tag_name }}" ]; then
            echo "client_payload.release_tag_name cannot be empty"
            exit 1
          fi

      - name: Security validation
        run: |
          # Log detailed security context for debugging
          echo "============ SECURITY CONTEXT ============"
          echo "Event type: ${{ github.event_name }}"
          echo "Sender: ${{ github.event.sender.login }}"
          echo "Repository: ${{ github.repository }}"
          echo "Client repository: ${{ github.event.client_payload.repository || 'Not provided' }}"
          echo "Client organization: ${{ github.event.client_payload.organization || 'Not provided' }}"
          echo "Target organization: ${{ env.TARGET_ORG }}"
          echo "Target repository: ${{ env.TARGET_REPO }}"
          echo "Release tag: ${{ github.event.client_payload.release_tag_name }}"
          echo "=========================================="
          
          # 1. Verify sender's organization matches our TARGET_ORG
          SENDER_ORG=$(echo "${{ github.event.sender.login }}" | tr '[:upper:]' '[:lower:]')
          TARGET_ORG_LOWER=$(echo "${{ env.TARGET_ORG }}" | tr '[:upper:]' '[:lower:]')
          
          echo "Checking sender organization: $SENDER_ORG against target: $TARGET_ORG_LOWER"
          
          if [[ "$SENDER_ORG" != "$TARGET_ORG_LOWER" ]]; then
            echo "SECURITY ERROR: Unauthorized sender. Sender organization $SENDER_ORG does not match our target organization $TARGET_ORG_LOWER"
            exit 1
          fi
          echo "✓ Sender validation passed"
          
          # 2. Verify the event comes from our main repository
          if [[ "${{ github.event.repository.full_name }}" != "${{ env.TARGET_ORG }}/${{ env.TARGET_REPO }}" ]]; then
            echo "SECURITY ERROR: Unauthorized source repository. Event not from the main repository (${{ github.event.repository.full_name }} vs ${{ env.TARGET_ORG }}/${{ env.TARGET_REPO }})"
            exit 1
          fi
          echo "✓ Repository validation passed"
          
          # 3. Check client repository that triggered the dispatch if available
          if [[ -n "${{ github.event.client_payload.repository }}" ]]; then
            CLIENT_REPO="${{ github.event.client_payload.repository }}"
            echo "Checking client repository: $CLIENT_REPO"
            
            # Extract client repository owner
            CLIENT_ORG=$(echo "$CLIENT_REPO" | cut -d'/' -f1 | tr '[:upper:]' '[:lower:]')
            
            if [[ "$CLIENT_ORG" != "$TARGET_ORG_LOWER" ]]; then
              echo "SECURITY ERROR: Unauthorized client repository. Client repository organization ($CLIENT_ORG) does not match target organization ($TARGET_ORG_LOWER)"
              exit 1
            fi
            echo "✓ Client repository validation passed"
          else
            echo "ℹ️ No client repository information provided in the payload"
            
            # Check organization directly if provided
            if [[ -n "${{ github.event.client_payload.organization }}" ]]; then
              CLIENT_ORG=$(echo "${{ github.event.client_payload.organization }}" | tr '[:upper:]' '[:lower:]')
              echo "Checking client organization: $CLIENT_ORG"
              
              if [[ "$CLIENT_ORG" != "$TARGET_ORG_LOWER" ]]; then
                echo "SECURITY ERROR: Unauthorized client organization. Client organization ($CLIENT_ORG) does not match target organization ($TARGET_ORG_LOWER)"
                exit 1
              fi
              echo "✓ Client organization validation passed"
            else
              echo "⚠️ WARNING: No client repository or organization information provided in the payload. Security validation is limited."
            fi
          fi
          
          # 4. Additional payload verification
          if [[ -z "${{ github.event.client_payload.release_tag_name }}" ]]; then
            echo "SECURITY ERROR: Missing required payload parameter: release_tag_name"
            exit 1
          fi
          echo "✓ Payload validation passed"
          
          echo "✅ All security validations passed. Proceeding with workflow."

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Docker Environment
        uses: ./.github/actions/setup-docker-environment
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
          ghcr_username: ${{ github.actor }}
          ghcr_password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.TARGET_ORG }}/${{ env.TARGET_REPO }}
          path: arc/
          ref: ${{ github.event.client_payload.release_tag_name }}

      - name: Get short SHA
        id: get_sha_short
        run: |
          echo "sha_short=$(git rev-parse --short ${{ github.event.client_payload.release_tag_name }})" >> $GITHUB_OUTPUT
        shell: bash
        working-directory: arc/

      - uses: actions/setup-go@v3
        with:
          go-version: '1.18.2'

      - name: Install tools
        run: |
          curl -L -O https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.2.0/kubebuilder_2.2.0_linux_amd64.tar.gz
          tar zxvf kubebuilder_2.2.0_linux_amd64.tar.gz
          sudo mv kubebuilder_2.2.0_linux_amd64 /usr/local/kubebuilder
          curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash
          sudo mv kustomize /usr/local/bin
          curl -L -O https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz
          tar zxvf ghr_v0.13.0_linux_amd64.tar.gz
          sudo mv ghr_v0.13.0_linux_amd64/ghr /usr/local/bin

      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: ./arc
          file: ./arc/Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: VERSION=${{ github.event.client_payload.release_tag_name }}
          push: ${{ github.event.client_payload.push_to_registries }}
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.TARGET_REPO }}:latest
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.TARGET_REPO }}:${{ github.event.client_payload.release_tag_name }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.TARGET_REPO }}:${{ github.event.client_payload.release_tag_name }}-${{ steps.get_sha_short.outputs.sha_short }}
            ghcr.io/${{ env.TARGET_ORG }}/${{ env.TARGET_REPO }}:latest
            ghcr.io/${{ env.TARGET_ORG }}/${{ env.TARGET_REPO }}:${{ github.event.client_payload.release_tag_name }}
            ghcr.io/${{ env.TARGET_ORG }}/${{ env.TARGET_REPO }}:${{ github.event.client_payload.release_tag_name }}-${{ steps.get_sha_short.outputs.sha_short }}
          cache-from: type=gha
          cache-to: type=gha,mode=max